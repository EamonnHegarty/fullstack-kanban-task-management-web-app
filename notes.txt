A user has board, boards have tasks, tasks have subtasks 

one to many, one to many, one to many 

so board tables will have UserID as the foreignKey, task tables will have boardID as their forign key 

to consider
- load after login the entire payload of boards -> tasks -> subtasks 
- then front end we split it so save making many get requests on clicks 

example data:
[
  {
    id: 1,
    boardName: "Platform Launch",
    tasks: [
      {
        id: 1,
        taskTitle: "Build the UI for platform",
        status: "to do",
        taskDescription:
          "our platform will need a ui for the users to interact with the website",
        subTasks: [
          {
            id: 1,
            subtaskTitle: "research frameworks",
            completed: false,
          }
          {
            id: 2,
            subtaskTitle: "implement chosen framework",
            completed: false,
          },
        ],
      },
      {
        id: 2,
        taskTitle: "Demo the UI to stakeholders",
        taskDescription:
          "now that we have selected the UI and built lets demo to our stakeholders and get their approval",
        status: "to do",
        subTasks: [
          {
            id: 1,
            subtaskTitle: "set up teams meeting",
            completed: false,
          },
          {
            id: 2,
            subtaskTitle: "implement chosen framework",
            completed: false,
          },
        ],
      },
    ],
  }
];

prefix requests: api
Boards:

GET /boards: Retrieve all boards with all tasks and sub tasks.
GET /boards/{board_id}: Retrieve a specific board.
POST /boards: Create a new board.
PUT /boards/{board_id}: Update an existing board.
DELETE /boards/{board_id}: Delete a board.

GET /boards-complete: Retrieve all boards tasks and subtasks in formatted json

Tasks:

GET /boards/{board_id}/tasks: Retrieve all tasks for a specific board.
GET /boards/{board_id}/tasks/{task_id}: Retrieve a specific task within a board.
POST /boards/{board_id}/tasks: Create a new task within a board.
PUT /boards/{board_id}/tasks/{task_id}: Update an existing task within a board.
DELETE /boards/{board_id}/tasks/{task_id}: Delete a task within a board.



Subtasks:

GET /boards/{board_id}/tasks/{task_id}/subtasks: Retrieve all subtasks for a specific task.
GET /boards/{board_id}/tasks/{task_id}/subtasks/{subtask_id}: Retrieve a specific subtask within a task.
POST /boards/{board_id}/tasks/{task_id}/subtasks: Create a new subtask within a task.
PUT /boards/{board_id}/tasks/{task_id}/subtasks/{subtask_id}: Update an existing subtask within a task.
DELETE /boards/{board_id}/tasks/{task_id}/subtasks/{subtask_id}: Delete a subtask within a task.

while using youtube video to learn about sql and pgadmin: 
video on - 4:33:00