A user has board, boards have tasks, tasks have subtasks 

one to many, one to many, one to many 

so board tables will have UserID as the foreignKey, task tables will have boardID as their forign key 

to consider
- load after login the entire payload of boards -> tasks -> subtasks 
- then front end we split it so save making many get requests on clicks 

****** CURRENT FINISHED BRAD TRAVERSY - CHAPTER 3 - PRODUCT CONTROLLER

TO DO 
- update expected fake data
- update routes
- update schema and db

example data:
[
  {
    "id": 1,
    "boardName": "Platform Launch",
    "columns": [
      {
        "id": 1,
        "columnName": "Todo",
        "tasks": [
          {
            "id": 1,
            "taskTitle": "Build the UI for platform",
            "status": "to do",
            "taskDescription": "our platform will need a ui for the users to interact with the website",
            "subTasks": [
              {
                "id": 1,
                "subtaskTitle": "research frameworks",
                "completed": false
              },
              {
                "id": 2,
                "subtaskTitle": "implement chosen framework",
                "completed": false
              }
            ]
          },
          {
            "id": 2,
            "taskTitle": "Demo the UI to stakeholders",
            "status": "to do",
            "taskDescription": "now that we have selected the UI and built it, let's demo to our stakeholders and get their approval",
            "subTasks": [
              {
                "id": 1,
                "subtaskTitle": "set up teams meeting",
                "completed": false
              },
              {
                "id": 2,
                "subtaskTitle": "prepare demo presentation",
                "completed": false
              }
            ]
          }
        ]
      }
    ]
  }
]

api (for now just the routes I know we will need)

BOARDS

GET /api/boards - retrieve all board names 
GET /api/boards/{boardId} - retrieve individual board with all its columns, tasks, subtasks
POST /api/boards - create a new board with columns 
PUT/PATCH /api/boards/{boardId} - update board or columns of board, 

COLUMNS
GET /api/boards/{boardId}/columns - get the columns for a board, this is needed for the options when user creates a new task

TASKS 
POST /api/boards/{boardId}/columns/{columnId}/tasks - create a task with subtasks for a column for a board
PUT/PATCH /api/boards/{boardId}/columns/{columnId}/tasks/{tasksId} - update the column of a board
DELETE /api/boards/{boardId}/columns/{columnId}/tasks/{tasksId} - delete a task for a column of a board



